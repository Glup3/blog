[{"content":"My Name is Phuc Tran. I am living in Austria and my parents are from Vietnam. Fullstack Software Engineer and currently working for Willhaben. I love to learn new stuff and experiment around with new technologies. My hobbies besides coding are:\n Playing video games (Valorant, Osu, Minecraft, \u0026hellip;) Doing sports: Taekwondo, Football, Cycling, Skateboarding Watching anime, reading manga \u0026amp; light novels Learning Japanese (JLPT 4 currently)    Phuc Tran in a suit\n  Languages and Technologies Proficient: JavaScript, TypeScript, ReactJS, GraphQL, REST, NodeJS, MySQL, PostgreSQL, Java, Flutter, HTML, CSS, GitHub, Gitlab, Docker, MacOS\nExposure: Angular, Express, Django, Spring Boot, Spring Cloud, Bootstrap, Materialize, Websockets, Android, C#, Python, Golang, Bitbucket, PLSQL, MongoDB, Firebase, Bash, Microservices, NGINX, Jenkins, CI/CD, Automated Tests, Jest, Cisco, Windows, Linux\nWanna get in touch? You can find me on my social medias or over:\n E-Mail: glup3.tran@gmail.com Discord: Glup3#4306  ","permalink":"https://glup3.tech/posts/about-me/","summary":"My Name is Phuc Tran. I am living in Austria and my parents are from Vietnam. Fullstack Software Engineer and currently working for Willhaben. I love to learn new stuff and experiment around with new technologies. My hobbies besides coding are:\n Playing video games (Valorant, Osu, Minecraft, \u0026hellip;) Doing sports: Taekwondo, Football, Cycling, Skateboarding Watching anime, reading manga \u0026amp; light novels Learning Japanese (JLPT 4 currently)    Phuc Tran in a suit","title":"About Me"},{"content":"Step 0: Introduction  Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.\nHugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike systems that dynamically build a page with each visitor request, Hugo builds pages when you create or update your content. Since websites are viewed far more often than they are edited, Hugo is designed to provide an optimal viewing experience for your website’s end users and an ideal writing experience for website authors.\n Features\n Extremely fast build times (\u0026lt; 1 ms per page) Completely cross platform LiveReload Powerful theming Straightforward organization for your projects \u0026hellip;  You can read more about the feature here. This tutorial is based on the official Hugo Quick Start guide.\nStep 1: Install Hugo Installation on Mac is as easy as this. Refer here for other systems.\n$ brew install hugo Verify if you installed Hugo correctly:\n$ hugo version # output: hugo v0.82.1+extended darwin/amd64 BuildDate=unknown Step 2: Create a new Hugo project (aka Site) $ hugo new site fresh_blog $ cd fresh_blog This will create a new Hugo site in a folder named fresh_blog.\nStep 3: Add a Hugo Theme There are a lot of themes under themes.gohugo.io. I\u0026rsquo;m going to use PaperMod for this tutorial.\n$ git init $ git submodule add https://github.com/adityatelange/hugo-PaperMod themes/papermod This will add the theme as git submodule under themes/papermod. You can also download the theme and put the content here or git clone it.\nNow you need to use the theme by adding theme = \u0026quot;PaperMod\u0026quot; to the bottom of the file config.toml. It should look like this now:\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;PaperMod\u0026#34; Step 4: Add Some Content Before we create content, we will use the PaperMod content template. Create a new file in archetypes/post.md and paste this into it:\n--- title: \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date: {{ .Date }} # weight: 1 # aliases: [\u0026quot;/first\u0026quot;] tags: [\u0026quot;tag1\u0026quot;, \u0026quot;tag2\u0026quot;] categories: [\u0026quot;category1\u0026quot;, \u0026quot;category2\u0026quot;] author: \u0026quot;Me\u0026quot; # multiple authors: [\u0026quot;Me\u0026quot;, \u0026quot;You\u0026quot;] showToc: false TocOpen: false draft: true hidemeta: false comments: false # description: \u0026quot;Description Text.\u0026quot; disableShare: false disableHLJS: false hideSummary: false searchHidden: false ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true cover: image: \u0026quot;images/imageName\u0026quot; # or URL alt: \u0026quot;\u0026lt;alt text\u0026gt;\u0026quot; caption: \u0026quot;\u0026lt;text\u0026gt;\u0026quot; relative: false # when using page bundles set this to true hidden: true # only hide on current single page editPost: URL: \u0026quot;https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;PROJECT_NAME\u0026gt;/content/{{ .Name }}\u0026quot; Text: \u0026quot;Suggest Changes\u0026quot; appendFilePath: true --- Create content by using the new command or create the file manually.\n$ hugo new --kind post posts/first-post/index.md This will generate a content file index.md based on the post template under content/posts/first-post/. Write your content at the bottom of the file and modify the theme configs above if neeeded.\nStep 5: Start the Hugo server $ hugo server -D # output: | EN -------------------+----- Pages | 18 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 6 Sitemaps | 1 Cleaned | 0 Built in 45 ms Watching for changes in /user_dir/fresh_blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /user_dir/fresh_blog/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop The -D flag tells the server to also use draft content. File changes will automatically refresh the server, no need to refresh the browser.\nYou can find your running webserver at http://localhost:1313/.\nStep 6: Build static pages Super simple. Just call:\n$ hugo -D This will create the folder public with all static files in it. Have fun now :)\n","permalink":"https://glup3.tech/posts/how-to-get-started-with-hugo/","summary":"Step 0: Introduction  Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.\nHugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike systems that dynamically build a page with each visitor request, Hugo builds pages when you create or update your content. Since websites are viewed far more often than they are edited, Hugo is designed to provide an optimal viewing experience for your website’s end users and an ideal writing experience for website authors.","title":"How To Get Started With Hugo"}]